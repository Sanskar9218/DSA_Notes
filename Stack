╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║              📦 Stack Basics              ║  ║              🧪 Stack Methods             ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
Stack<Integer> st = new Stack<>();              st.push(10);        // add element
                                                st.pop();           // remove top
                                                int top = st.peek();// top without removing

st.isEmpty();                                    st.size();
st.search(10);                                   st.contains(20);

╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║          🔁 Stack Iteration              ║  ║         📌 Stack Use Cases               ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
for (int x : st) { ... }                        // Balanced parentheses
                                                Stack<Character> stack = new Stack<>();
while (!st.isEmpty()) {                         for (char c : s.toCharArray()) {
    System.out.println(st.pop());                   if (c == '(') stack.push(c);
}                                                   else if (c == ')' && !stack.isEmpty()) stack.pop();
                                                }

╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║        🧱 Stack Alternative: Deque        ║  ║     🚀 Faster Stack with ArrayDeque     ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
Deque<Integer> dq = new ArrayDeque<>();         dq.push(1);          // add top
dq.pop();                                       dq.peek();           // view top
dq.isEmpty();                                   dq.contains(5);

