╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║             🗺️ HashMap Basics             ║  ║             🧺 HashSet Basics             ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
Map<String, Integer> map = new HashMap<>();     Set<String> set = new HashSet<>();

map.put("key", 1);                              set.add("apple");
int val = map.get("key");                       boolean has = set.contains("apple");

map.containsKey("key");                         set.remove("apple");
map.containsValue(1);                           set.isEmpty();
map.remove("key");                              set.size();

map.size();                                     set.clear();
map.isEmpty();                                  Iterator<String> it = set.iterator();
map.clear();

map.keySet();                                   for (String s : set) { ... }
map.values();                                   set.addAll(otherSet);
map.entrySet();                                 set.retainAll(otherSet); // intersection
                                                set.removeAll(otherSet); // difference

╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║       🔁 Iterating Through HashMap        ║  ║           🔁 Set + Stream Ops           ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
for (Map.Entry<String, Integer> e : map.entrySet()) {     set.stream().forEach(System.out::println);
    String key = e.getKey();                              boolean none = set.stream().noneMatch(x -> x.isEmpty());
    int value = e.getValue();                             long count = set.stream().filter(x -> x.length() > 3).count();
}

for (String k : map.keySet()) {
    int v = map.get(k);
}

map.forEach((k, v) -> {
    System.out.println(k + " -> " + v);
});

╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║       🧱 Useful HashMap Shortcuts         ║  ║         📌 Common Use Cases             ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
// Default value if key missing                        // Frequency Count
int freq = map.getOrDefault("apple", 0);               Map<Character, Integer> count = new HashMap<>();
                                                       for (char c : s.toCharArray()) {
map.put("apple", map.getOrDefault("apple", 0) + 1);        count.put(c, count.getOrDefault(c, 0) + 1);
                                                       }

map.replace("key", 42);                                // Remove if present
map.computeIfAbsent("banana", k -> 100);               if (set.contains(x)) set.remove(x);

╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║         🎯 HashMap Conditions             ║  ║             🔎 HashSet Tricks           ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
// Remove by condition                                 // Intersection check
map.entrySet().removeIf(e -> e.getValue() < 10);       set.retainAll(new HashSet<>(List.of("a", "b")));

boolean anyValueOver10 = map.values().stream()         // Unique check
    .anyMatch(v -> v > 10);                            Set<Character> seen = new HashSet<>();
                                                       for (char c : s.toCharArray()) {
                                                           if (!seen.add(c)) { dup = true; break; }
                                                       }

╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║        🔄 Convert to List/Array           ║  ║       🧾 Sorting Map Entries (List)     ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
List<String> keys = new ArrayList<>(map.keySet());     List<Map.Entry<String, Integer>> list =
List<Integer> vals = new ArrayList<>(map.values());    new ArrayList<>(map.entrySet());

String[] arr = set.toArray(new String[0]);             list.sort((a, b) -> b.getValue() - a.getValue());
                                                       for (Map.Entry<String, Integer> e : list) {
                                                           System.out.println(e.getKey() + ": " + e.getValue());
                                                       }
