╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║            🧱 Queue Basics               ║  ║           🧪 Queue Methods               ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
Queue<Integer> q = new LinkedList<>();          q.offer(10);       // add element
                                                q.poll();          // remove head
                                                q.peek();          // view head
                                                q.isEmpty();       // check empty

Deque<Integer> dq = new ArrayDeque<>();         dq.offerFirst(1);  // add front
                                                dq.offerLast(2);   // add rear
                                                dq.pollFirst();    // remove front
                                                dq.pollLast();     // remove rear

╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║          🔁 Queue Traversal              ║  ║          📌 Queue Use Cases              ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
for (int x : q) {                              // BFS Traversal
    System.out.print(x + " ");                // Producer-Consumer, Sliding Window
}

╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║        🚀 Performance Notes              ║  ║       🌀 Circular Queue Note             ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
LinkedList: O(1) for poll/offer                // Fixed-size queue:
ArrayDeque: faster than LinkedList             int[] q = new int[size];
                                               int front = 0, rear = 0;
