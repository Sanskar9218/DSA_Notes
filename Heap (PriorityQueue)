╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║           🔧 Min/Max Heap Basics         ║  ║        🧪 PriorityQueue Methods          ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
PriorityQueue<Integer> minHeap = new PriorityQueue<>();     // Min Heap
PriorityQueue<Integer> maxHeap = new PriorityQueue<>(       // Max Heap
    (a, b) -> b - a                                         
);

minHeap.add(5);                                  minHeap.offer(3);   // Insert
minHeap.peek();                                  minHeap.poll();     // View & remove smallest
minHeap.isEmpty();                               minHeap.size();

╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║         🔁 Heap Traversal                ║  ║         📌 Heap Use Cases                ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
while (!minHeap.isEmpty()) {                    // Top K problems (e.g., top K freq elements)
    System.out.println(minHeap.poll());         // Dijkstra’s algo, Scheduling, Greedy algos
}

╔══════════════════════════════════════════╗  ╔═════════════════════════════════════════╗
║     ⚠️ Notes for Custom Objects          ║  ║         🚀 Performance Notes             ║
╚══════════════════════════════════════════╝  ╚═════════════════════════════════════════╝
PriorityQueue<Node> pq = new PriorityQueue<>(   // Insert/Remove: O(log n)
    (a, b) -> a.cost - b.cost                    // Peek: O(1)
);
