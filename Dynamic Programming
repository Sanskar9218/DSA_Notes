
游댮 Top-Down (Memoization)              游댯 Bottom-Up (Tabulation)
----------------------------------     ----------------------------------
int[][] memo = new int[n][m];          int[][] dp = new int[n+1][m+1];

int dp(int i, int j) {                 for (int i = 0; i <= n; i++) {
  if (base case) return value;           for (int j = 0; j <= m; j++) {
  if (memo[i][j] != 0) return memo[i][j];  dp[i][j] = ...;
  return memo[i][j] = dp(i-1, j);         }
}                                     }


游리 Space Optimization                  游닃 Common DP Patterns
----------------------------------     ----------------------------------
int prev = 0, curr = 1;                游릭 Fibonacci (nth):
for (int i = 2; i <= n; i++) {           dp[i] = dp[i-1] + dp[i-2];
  int temp = curr;                     -------------------------------
  curr += prev;                        游릭 Climb Stairs:
  prev = temp;                           dp[i] = dp[i-1] + dp[i-2];
}                                      -------------------------------
return curr;                           游릭 Coin Change (min coins):
                                        dp[i] = min(dp[i - coin] + 1)
                                       -------------------------------
                                       游릭 Subset Sum / 0-1 Knapsack:
                                        dp[i][w] = max(
                                          dp[i-1][w],
                                          dp[i-1][w - wt[i]] + val[i]
                                        )





// Fibonacci
int fib(int n) {
  if (n <= 1) return n;
  int a = 0, b = 1;
  for (int i = 2; i <= n; i++) {
    int temp = a + b;
    a = b; b = temp;
  }
  return b;
}

// Climb Stairs
int climbStairs(int n) {
  if (n <= 2) return n;
  int a = 1, b = 2;
  for (int i = 3; i <= n; i++) {
    int temp = a + b;
    a = b; b = temp;
  }
  return b;
}

// Coin Change (min coins)
int coinChange(int[] coins, int amt) {
  int[] dp = new int[amt+1];
  Arrays.fill(dp, amt+1);
  dp[0] = 0;
  for (int coin : coins)
    for (int i = coin; i <= amt; i++)
      dp[i] = Math.min(dp[i], dp[i-coin] + 1);
  return dp[amt] > amt ? -1 : dp[amt];
}

// 0/1 Knapsack
int knapsack(int[] wt, int[] val, int W) {
  int n = wt.length;
  int[][] dp = new int[n+1][W+1];
  for (int i = 1; i <= n; i++)
    for (int w = 0; w <= W; w++)
      if (wt[i-1] <= w)
        dp[i][w] = Math.max(val[i-1]+dp[i-1][w-wt[i-1]], dp[i-1][w]);
      else
        dp[i][w] = dp[i-1][w];
  return dp[n][W];
}

// Longest Common Subsequence
int lcs(String a, String b) {
  int n = a.length(), m = b.length();
  int[][] dp = new int[n+1][m+1];
  for (int i = 1; i <= n; i++)
    for (int j = 1; j <= m; j++)
      if (a.charAt(i-1) == b.charAt(j-1))
        dp[i][j] = dp[i-1][j-1] + 1;
      else
        dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
  return dp[n][m];
}
